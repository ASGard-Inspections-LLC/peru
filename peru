#! /usr/bin/env python3

import collections
import os
import sys

peru_env = {}
# TODO: "build". "deps"?
general_fields = ("name", "dest")


def validate_plugin(name, fields, callback):
    assert None not in (name, fields, callback)
    assert name not in peru_env, "Plugin names must be unique: " + name
    overlapping_fields = set(fields) & set(general_fields)
    assert not overlapping_fields, \
        "Field names already taken: " + ", ".join(overlapping_fields)


def validate_module(name, fields, kwargs):
    for field in general_fields + fields:
        assert field in kwargs, \
            "{0} requires a {1} field.".format(name, field)
    for field in kwargs:
        assert field in general_fields + fields, \
            "{0} does not allow a {1} field.".format(name, field)


def peru_register(*, name=None, fields=None, get_files_callback=None):
    validate_plugin(name, fields, get_files_callback)
    def plugin_function(**kwargs):
        print(name)
        validate_module(name, fields, kwargs)
        # TODO: When we have a cache, use that as the target dir instead of the
        # final dest dir.
        dest = kwargs["dest"]
        os.makedirs(dest, exist_ok=True)
        # TODO: filter out the non-plugin fields.
        get_files_callback(kwargs, dest)
    plugin_function.__name__ = name
    peru_env[name] = plugin_function


def main():
    if not os.path.isfile("peru"):
        print("No peru file found.")
        sys.exit(1)

    # TODO: stop hardcoding this
    plugins = ["git_plugin.py"]
    for plugin_name in plugins:
        base_dir = os.path.dirname(os.path.realpath(__file__))
        plugin_path = os.path.join(base_dir, plugin_name)
        with open(plugin_path) as plugin_file:
            plugin_code = plugin_file.read()
        exec(plugin_code, {"peru_register": peru_register})

    peru_file_name = os.getenv("PERU_FILE_NAME") or "peru"
    with open(peru_file_name) as peru_file:
        peru_code = peru_file.read()

    exec(peru_code, dict(peru_env))


if __name__ == "__main__":
    main()
